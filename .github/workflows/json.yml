name: Update Sorted Videos JSON
on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC
  workflow_dispatch:  # Allows manual trigger

jobs:
  update-json:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install node-fetch@2  # Using v2 since it's CommonJS compatible
        
      - name: Fetch and process JSON data
        run: |
          node -e "const fs = require('fs');
          const fetch = require('node-fetch');
          
          (async () => {
            const channels = [
              'UCyBzV_g6Vfv5GM3aMQb3Y_A', 'UCrB8j1YCbuYhIcImwNkJgCg', 'UCPGNioeYrJq4nyAt-DVIHZg',
              'UCEEi1lDCkKi1ukmTAgc9-zA', 'UCVIq229U5A54UVzHQJqZCPQ', 'UCcKMjICfQPjiVMpqS-yF7hA',
              'UCWcQCJHYOK2ZZRA2Sym0mOw', 'UCn372MiubHTkPFwxKVv45LQ', 'UCUF0EGa7_yM4TXQl4LYt-YA'
            ];
            
            const instancesResponse = await fetch('https://raw.githubusercontent.com/n-ce/Uma/main/dynamic_instances.json');
            if (!instancesResponse.ok) throw new Error('Failed to fetch Piped instances');
            const instances = await instancesResponse.json();
            const pipedInstance = instances.piped[0] || 'https://pipedapi.kavin.rocks';
            
            let allVideos = [];
            let allChannels = [];
            
            for (const channelId of channels) {
              try {
                const channelResponse = await fetch(`${pipedInstance}/channel/${channelId}`);
                if (!channelResponse.ok) continue;
                const channelData = await channelResponse.json();
                if (!channelData || !channelData.videos) continue;
                
                allChannels.push({
                  url: `/channel/${channelId}`,
                  type: 'channel',
                  name: channelData.name || 'Unknown',
                  thumbnail: channelData.avatarUrl || '',
                  description: channelData.description || '',
                  subscribers: channelData.subscriberCount || 0,
                  videos: channelData.videoCount || 0,
                  verified: channelData.verified || false
                });
                
                const videos = channelData.videos.map(video => ({
                  type: 'stream',
                  url: `/watch?v=${video.videoId}`,
                  title: video.title || 'Unknown',
                  thumbnail: `${pipedInstance}/vi/${video.videoId}?host=i.ytimg.com`,
                  uploaderName: channelData.name || 'Unknown',
                  uploaderUrl: `/channel/${channelId}`,
                  uploadedDate: video.uploadedDate || '',
                  duration: video.duration || 0,
                  views: video.views || 0,
                  uploaderVerified: channelData.verified || false,
                  shortDescription: video.shortDescription || '',
                  uploaded: video.uploaded || 0,
                  uploaderAvatar: channelData.avatarUrl || '',
                  isShort: video.isShort || false
                }));
                
                allVideos = allVideos.concat(videos);
              } catch (error) {
                console.error(`Failed to fetch data for channel ${channelId}:`, error);
              }
            }
            
            allVideos.sort((a, b) => (b.views || 0) - (a.views || 0));
            const sortedData = { items: allVideos, channels: allChannels };
            fs.writeFileSync('sorted_videos.json', JSON.stringify(sortedData, null, 2));
          })();"
          
      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add sorted_videos.json
          git diff --quiet && git diff --staged --quiet || git commit -m "Updated sorted_videos.json"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
