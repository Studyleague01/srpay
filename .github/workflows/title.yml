name: Sync Channel Data jsv

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC
  workflow_dispatch:  # Allows manual trigger

jobs:
  sync-channel-data:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install node-fetch

      - name: Fetch and process channel data
        run: |
          node - <<'EOF'
          const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

          async function fetchWithRetry(url, retries = 3) {
              for (let i = 0; i < retries; i++) {
                  try {
                      const response = await fetch(url);
                      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                      return await response.json();
                  } catch (error) {
                      if (i === retries - 1) throw error;
                      await new Promise(resolve => setTimeout(resolve, Math.pow(2, i) * 1000));
                  }
              }
          }

          async function fetchChannelData(channelId) {
              const baseUrl = "https://pipedapi.kavin.rocks";
              let nextPage = null;
              let allVideos = [];
              
              try {
                  while (true) {
                      const url = nextPage ? 
                          `${baseUrl}/channel/${channelId}?nextpage=${encodeURIComponent(nextPage)}` :
                          `${baseUrl}/channel/${channelId}`;
                      
                      const data = await fetchWithRetry(url);
                      
                      const videos = data.relatedStreams?.map(video => ({
                          title: video.title,
                          id: video.url.split('=').pop(),
                          size: 0
                      })) || [];
                      
                      allVideos.push(...videos);
                      
                      nextPage = data.nextpage;
                      if (!nextPage) break;
                      
                      await new Promise(resolve => setTimeout(resolve, 100)); // Small delay
                  }
                  
                  return allVideos;
              } catch (error) {
                  console.error('Error fetching channel data:', error);
                  throw error;
              }
          }

          async function processChannelData() {
              try {
                  // Fetch downloads.json
                  const downloadsData = await fetchWithRetry(
                      'https://raw.githubusercontent.com/Studyleague01/srpay/refs/heads/main/downloads.json'
                  );
                  
                  // Fetch channel data
                  const channelId = "UCPGNioeYrJq4nyAt-DVIHZg";
                  const videos = await fetchChannelData(channelId);
                  
                  // Process and filter videos
                  const finalData = {};
                  for (const video of videos) {
                      if (downloadsData[video.id]) {
                          finalData[video.id] = {
                              title: video.title,
                              id: video.id,
                              filePath: downloadsData[video.id].filePath,
                              size: downloadsData[video.id].size
                          };
                      }
                  }
                  
                  // Save to channel.json
                  require('fs').writeFileSync(
                      'channel.json',
                      JSON.stringify(finalData, null, 2),
                      'utf8'
                  );
                  
                  console.log(`Processed ${Object.keys(finalData).length} videos`);
              } catch (error) {
                  console.error('Error in processing:', error);
                  process.exit(1);
              }
          }

          processChannelData();
          EOF

      - name: Commit and push if changed
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add channel.json
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update channel data" && git push)
